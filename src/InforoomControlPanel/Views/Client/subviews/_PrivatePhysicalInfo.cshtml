@model Client
@using Common.Tools
@using Inforoom2.Components
@using Inforoom2.Helpers
@using Inforoom2.Models
@using Inforoom2.Models.Services
@{
	Layout = "";
	Client client = Model;
	List<Status> statusList = ViewBag.StatusList;
	string clientStatusChangeComment = ViewBag.clientStatusChangeComment ?? "";
	ClientEndpoint endpoint = client.Endpoints.FirstOrDefault(s => !s.Disabled);
	var lease = endpoint != null ? endpoint.LeaseList.LastOrDefault() : null;
}
<div class="panel panel-default blockJsLockControll">
@using (@Html.BeginForm("InfoPhysical", "Client", null, FormMethod.Post, new {@id = "ClientEditorForm", @class = "form-horizontal form-groups-bordered"})) {
	@Html.HiddenFor(o => client.Id)
	<input id="subViewName" name="subViewName" type="hidden" value="_PrivatePhysicalInfo">
		@* Блок пустой *@
	<div id="emptyBlock_PrivatePhysicalInfo" class="emptyBlock"></div>
}
@* Блок просмотра *@
<div id="defaultBlock_PrivatePhysicalInfo" class="defaultBlock hid">
	<div class="panel-heading">
		<h3 class="panel-title bold">
			<a class="c-pointer" onclick="changeVisibility('emptyBlock_PrivatePhysicalInfo')">Личная информация</a>
		</h3>
	</div>
	<div class="panel-body">
		<table id="table-2" class="table hiddenOverflow table-bordered table-striped datatable dataTable no-footer clientTable border-right-white" role="grid" aria-describedby="table-2_info">
			<tbody>
			<tr class="@(lease != null && lease.LeaseEnd > SystemTime.Now() ? "online" : "")">
				<td>Номер лицевого счета</td>
				<td>
					<span>@client.ClientId</span>
				</td>
			</tr>
			<tr>
				<td>Город</td>
				<td>
					<span>@client.GetRegion().Name</span>
				</td>
			</tr>
			<tr>
				<td>
					<a class="c-pointer blue addressAjaxRunner" title="Редактирование адреса подключения" data-toggle="modal" data-target="#ModelForAddress" onclick="StartAddressAjaxRunner(this)">Адрес подключения<span> ( редактировать )</span></a>
				</td>
				<td style="width: 60%;">
					<span>@client.PhysicalClient.Address.GetStringForPrint(city: false)</span>
				</td>
			</tr>
			<tr>
				<td>Дата регистрации</td>
				<td>
					<span>@(client.GetRegistrationDate().HasValue ? client.GetRegistrationDate().Value.ToString("dd.MM.yyyy") : "нет")</span>
				</td>
			</tr>
			<tr>
				<td>Зарегистрировал</td>
				<td>
					<span>@(client.WhoRegistered != null && client.WhoRegistered.Id != 0 ? client.WhoRegistered.Name : "нет")</span>
				</td>
			</tr>
			<tr>
				<td>
					<a class="c-pointer blue" title="Изменение тарифа" data-toggle="modal" data-target="#ModelForPlan">Тариф<span> ( редактировать )</span></a>
				</td>
				<td>
					<span>@Html.Raw(client.PhysicalClient.Plan != null ? client.PhysicalClient.Plan.Name + " (" + (client.GetTariffPrice(true) != 0 ? "<span title='текущая стоимость'>"+ client.GetTariffPrice(true).ToString("0.00")+ " р.</span>"
			 + " / " + "<span title='полная стоимость'>" +
			 (client.PhysicalClient.Plan.Price != 0 && client.PhysicalClient.Plan.FinalPrice != 0 ? client.PhysicalClient.Plan.FinalPrice : client.PhysicalClient.Plan.Price).ToString("0.00") 
			 + " р.</span>" : "<span title='полная стоимость'>" +
			(client.PhysicalClient.Plan.Price != 0 && client.PhysicalClient.Plan.FinalPrice!= 0 ? client.PhysicalClient.Plan.FinalPrice : client.PhysicalClient.Plan.Price)
			.ToString("0.00") + " р.</span>") +")" : "нет")</span>
				</td>
			</tr>
			<tr>
				<td>Баланс</td>
				<td>
					<span>@client.PhysicalClient.Balance.ToString("0.00")</span>
				</td>
			</tr>
			<tr>
				<td>Денежных средств</td>
				<td>
					<span>@client.PhysicalClient.MoneyBalance.ToString("0.00")</span>
				</td>
			</tr>
			<tr>
				<td>Бонусов</td>
				<td>
					<span>@client.PhysicalClient.VirtualBalance.ToString("0.00")</span>
				</td>
			</tr>
			<tr>
			    <td>Остаток задолженности по расчетному периоду</td>
			    <td>
			        <span>@((client.GetSumWriteOffRemained()??0).ToString("0.00"))</span>
			    </td>
			</tr>
			<tr class="@(client.Status.Type == StatusType.NoWorked || client.Status.Type == StatusType.Dissolved ? "appeal Block" : "") @(client.Status.Type == StatusType.Dissolved ? "statusDissolved" : "")">
				<td>Статус клиента</td>
				<td>
					@if (client.HasActiveService<BlockAccountService>()) {
						<a class="c-pointer blue" title="Принудительное отключение услуги" data-target="#ModelBlockAccountCancel" data-toggle="modal">
							<strong class="red">@client.Status.Name</strong><span> ( отключить )</span></a>
					}
					else {
						<span>@client.Status.Name</span>
                    }
                    @if (client.StatusChangedOn.HasValue)
                    {<span class="gray"> (с @(client.StatusChangedOn.Value))</span>}
				</td>
			</tr>
			<tr>
				<td>
					<span title="Доступ в глобальную сеть">Глобальная сеть</span></td>
				<td>
					@if (client.Disabled) {
						<span class="red bold">Нет</span>
					}
					else {
						<span>Да</span>
					}
				</td>
			</tr>
			<tr>
				<td>
					<span title="Warning">Блокирующие сообщения</span></td>
				<td>
                    @if (client.ShowBalanceWarningPage && client.GetWarningState() != WarningState.NoWarning) {
                        <span class="red bold">Вкл.</span><span class="gray"> ( @client.GetWarningState().GetDescription().ToLower())</span>
                    }else{<span>Выкл.</span>}
				</td>
			</tr>
			<tr>
				<td>Почтовая рассылка</td>
				<td>
					<span>@(client.SendSmsNotification ? "да" : "нет")</span>
				</td>
			</tr>
			<tr>
				<td>
					<a class="c-pointer blue" title="Возврат скидки" data-toggle="modal" data-target="#ModelForSale">Скидка<span> ( редактировать )</span></a>
				</td>
				<td>
					<span>@client.Discount.ToString("0.00")% @(client.Plan!=null && client.Plan.IgnoreDiscount?"( по текущему тарифу не применяется )":"")</span>
				</td>
			</tr>

			@if (client.ConnectionRequest != null && client.ConnectionRequest.Status && client.ConnectionRequest.EndTime.HasValue) {
				<tr>
					<td>Заявка на подключение выполнена </td>
					<td>
						<span>@client.ConnectionRequest.EndTime.Value.ToShortDateString()</span>
					</td>
				</tr>
			}
			@if (client.ClientRequest != null) {
				<tr>
					<td>Создан по заявке</td>
					<td>
						<a target="_blank" href="@Url.Action("ConnectionRequestEdit","ConnectionRequest", new {client.ClientRequest.Id} )"> №@client.ClientRequest.Id</a>
					</td>
				</tr>
			}
			@if (client.RatedPeriodDate.HasValue) {
				<tr>
					<td>Дата начала расчетного периода</td>
					<td>
						<span>@client.RatedPeriodDate.Value.ToShortDateString()</span>
					</td>
				</tr>
			}
			@if (client.IsDisabledByBilling() || client.PhysicalClient.Balance < 0) {
				<tr>
					<td>Сумма для разблокировки</td>
					<td>
						<span>@client.ToPay(true).ToString("0.00") руб.</span>
					</td>
				</tr>
			}
			<tr>
				<td>Добровольная блокировка, доступно бесплатных дней</td>
				<td>
					<span>@client.FreeBlockDays</span>
				</td>
			</tr>
			@if (client.YearCycleDate.HasValue) {
				if (client.FreeBlockDays > 0) {
					<tr>
						<td>Дата окончания периода использования бесплатных дней</td>
						<td>
							<span>@client.YearCycleDate.Value.AddDays(-1).ToShortDateString()</span>
						</td>
					</tr>
				}
				else {
					<tr>
						<td>Новые бесплатные дни станут доступны с</td>
						<td>
							<span>@client.YearCycleDate.Value.ToShortDateString()</span>
						</td>
					</tr>
				}
			}
			@if (client.StartNoBlock.HasValue) {
				<tr>
					<td>Дата начала программы скидок</td>
					<td>
						<span>@client.StartNoBlock.Value.ToShortDateString()</span>
					</td>
				</tr>
			}
			<tr>
				<td>Подключение</td>
				<td>
					@if (client.ConnectionRequest != null && client.ConnectionRequest.ServiceMan != null && client.ConnectionRequest.Status) {
						<a target="_blank" class="c-pointer" href="@Url.Action("AttachRequest", "ConnectionTeam", new {@Id = client.Id, @type = ServicemenScheduleItem.Type.ClientConnectionRequest})">
							<span>выполнил @client.ConnectionRequest.ServiceMan.Employee.Name - @(client.ConnectionRequest.EndTime.HasValue ? client.ConnectionRequest.EndTime.Value.ToString("dd.MM.yyyy HH:mm") : "")</span>
						</a>
					}
					else {
						if (client.ConnectionRequest != null && client.ConnectionRequest.ServiceMan != null && client.ConnectionRequest.Status == false) {
							<a target="_blank" class="c-pointer" href="@Url.Action("AttachRequest", "ConnectionTeam", new {@Id = client.Id, @type = ServicemenScheduleItem.Type.ClientConnectionRequest})">
								<span>выполняет @client.ConnectionRequest.ServiceMan.Employee.Name - @(client.ConnectionRequest.EndTime.HasValue ? client.ConnectionRequest.BeginTime.Value.ToString("dd.MM.yyyy HH:mm") + " - "+ client.ConnectionRequest.EndTime.Value.ToString("HH:mm") : "")</span>
							</a>
						}
						else {
							<a target="_blank" class="c-pointer" href="@Url.Action("AttachRequest", "ConnectionTeam", new {@Id = client.Id, @type = ServicemenScheduleItem.Type.ClientConnectionRequest})">не назначено</a>
						}
					}
				</td>
			</tr>
			</tbody>
		</table>
	</div>
	<div class="panel-body" style="padding-top: 0px;">
		<a class="btn btn-blue lockButton">Редактировать</a>
	</div>
</div>
@* Блок редактирования *@
<div id="editBlock_PrivatePhysicalInfo" class="editBlock hid">
	<div class="panel-heading">
		<h3 class="panel-title bold">
			<a class="c-pointer" onclick="changeVisibility('emptyBlock_PrivatePhysicalInfo')">Личная информация (редактирование)</a>
		</h3>
	</div>
	<div class="panel-body">
		<table id="table-2" class="table table-bordered table-striped datatable dataTable no-footer clientTable" role="grid" aria-describedby="table-2_info">
			<tbody>
			<tr>
				<td style="max-width: 60px;">Фамилия</td>
				<td>
					@Html.TextBoxFor(o => client.Surname, new {@class = "form-control"})
					@ViewBag.Validation.GetError(client.PhysicalClient, "Surname")</td>
			</tr>
			<tr>
				<td style="max-width: 80px;">Имя</td>
				<td>
					@Html.TextBoxFor(o => client.PhysicalClient.Name, new {@class = "form-control"})
					@ViewBag.Validation.GetError(client.PhysicalClient, "Name")</td>
			</tr>
			<tr>
				<td style="max-width: 60px;">Отчество</td>
				<td>
					@Html.TextBoxFor(o => client.PhysicalClient.Patronymic, new {@class = "form-control"})
					@ViewBag.Validation.GetError(client.PhysicalClient, "Patronymic")</td>
			</tr>
			<tr>
				<td style="max-width: 60px;">Статус</td>
				<td>
					@Html.DropDownListExtendedFor(o => client.Status, statusList, obj => obj.Name, null, new {@Name = "clientStatus", @class = "form-control"}, client.Status.Id, true)
					@ViewBag.Validation.GetError(client, "Status")
				</td>
			</tr>
			<tr>
					<td style="max-width: 60px;">Комментарий к изменению статуса</td>
					<td>
						@Html.TextAreaFor(o => clientStatusChangeComment, new { @Name = "clientStatusChangeComment", @class = "form-control max-width200" })
						@ViewBag.Validation.GetError(client, "clientStatusChangeComment")
					</td>
			</tr>
			<tr>
				<td style="max-width: 60px;">
					<label class="c-pointer" for="sendSmsNotification">Почтовая рассылка</label>
				</td>
				<td>
					@Html.CheckBoxFor(o => client.SendSmsNotification, new {@class = "c-pointer", id = "sendSmsNotification"})
				</td>
			</tr>
			<tr>
				<td style="max-width: 60px;">Задача в Redmine для клиента</td>
				<td>
					@Html.TextBoxFor(o => client.RedmineTask, new {@class = "form-control"})
				</td>
			</tr>
			</tbody>
		</table>
	</div>
	<div class="panel-body" style="padding-top: 0px;">
		<div class="col">
			<button type="submit" class="btn btn-green">Сохранить</button>
			<a class="btn btn-red unlockButton">Отмена</a>
		</div>
	</div>
</div>
</div>

@Html.Partial("subviews/modelview/_PhysicalPlanEdit", client)
@Html.Partial("subviews/modelview/_PhysicalSaleUpdate", client)
@Html.Partial("subviews/modelview/_PhysicalAddressEdit", client)

@if (client.HasActiveService<BlockAccountService>()) {
	@Html.Partial("subviews/modelview/_PhysicalBlockAccountCancel", client)
}